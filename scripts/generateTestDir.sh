#!/usr/bin/env bash

test_dir=".testdir"
project_dir="nest-project"
relative_path=${test_dir:?}/$project_dir


# Check if the test directory exists
if [ ! -d $test_dir ]; then
  mkdir .test_dir
fi


# Check if the project directory exists
if [ -d "$relative_path" ]; then
  rm -rf "$relative_path"
fi

# Generate a new nest project
npx nest new "$relative_path"

update_env_file() {
    local variable_name="WATCHED_FOLDER"
    local value="$1"
    local env_file="$2"
    local hint="# NOTE: (auto-generated by generateTestDir.sh)"
    local new_value="${hint}\n${variable_name}=${value}"

    # check if hint + variable_name exists in the env_file
    if  output=$(sed -n "/$hint/{N;/\n$variable_name=/p}" "$env_file") && [ -n "$output" ]; then
      # Update the existing variable_name line
      sed -i "/${hint}/{N;s|\(${hint}\n${variable_name}=.*\)|${new_value}|}" "$env_file"
    # Check if variable_name exists in the env_file
    elif grep -q "^${variable_name}=" "$env_file"; then
      # Update the existing variable_name line
      sed -i "s|^${variable_name}=.*|$new_value|" "$env_file"
    else
      # Add variable_name to the end of the env_file on a new line
      echo -e "\n$new_value" >> "$env_file"
    fi
}

absolute_path=$(realpath "$relative_path")
# Update the .env.local and apps/api/.env.local files
update_env_file "$absolute_path" .env.local
update_env_file "$absolute_path" apps/api/.env.local